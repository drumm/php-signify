<?php

namespace DrupalAssociation\Signify;

class Verifier
{
    const COMMENTHDR = 'untrusted comment: ';
    const COMMENTHDRLEN = 19;
    const COMMENTMAXLEN = 1024;

    /**
     * @var string
     */
    protected $publicKeyRaw;

    protected $publicKey;

    /**
     * Verifier constructor.
     *
     * @param string $public_key
     *   A public key generated by the BSD signify application.
     */
     function __construct($public_key_raw) {
         $this->publicKeyRaw = $public_key_raw;
     }

    /**
     * Get the raw public key in use.
     *
     * @return string
     *   The public key.
     */
     public function getPublicKeyRaw(){
         return $this->publicKeyRaw;
     }

    /**
     * @return \DrupalAssociation\Signify\VerifierB64Data
     */
     public function getPublicKey() {
         if (!$this->publicKey) {
             $this->publicKey = $this->parseB64String($this->publicKeyRaw, SODIUM_CRYPTO_SIGN_PUBLICKEYBYTES);
         }
         return $this->publicKey;
     }

    /**
     * Parse the contents of a base 64 encoded file.
     *
     * @param string $b64
     *   The file contents.
     * @param int $length
     *   The length of the data, either 32 or 64 bytes.
     *
     * @return \DrupalAssociation\Signify\VerifierB64Data
     */
     public function parseB64String($b64, $length) {
         $parts = explode("\n", $b64);
         if (count($parts) !== 3) {
             throw new VerifierException("Invalid format; must contain two newlines, one after comment and one after base64");
         }
         $comment = $parts[0];
         if (substr($comment, 0, self::COMMENTHDRLEN) !== self::COMMENTHDR) {
             throw new VerifierException(sprintf("Invalid format; comment must start with '%s'", self::COMMENTHDR));
         }
         if (strlen($comment) > self::COMMENTHDRLEN + self::COMMENTMAXLEN) {
             throw new VerifierException(sprintf("Invalid format; comment longer than %d bytes", self::COMMENTMAXLEN));
         }
         return new VerifierB64Data($parts[1], $length);
     }

    /**
     * Verify a string message.
     *
     * @param string $signature
     *   The string contents of the signature (e.g. the contents of the file)
     * @param string $msg
     *   The string message (e.g. the contents of the file that was signed).
     *
     * @return string
     *   The message if the verification passed.
     */
    public function verifyMessage($signature, $msg = '') {
        $pubkey = $this->getPublicKey();
        $sig = $this->parseB64String($signature, SODIUM_CRYPTO_SIGN_BYTES);
        if ($pubkey->keyNum !== $sig->keyNum) {
            throw new VerifierException('verification failed: checked against wrong key');
        }
        $valid = sodium_crypto_sign_verify_detached($sig->data, $msg, $pubkey->data);
        if (!$valid) {
            throw new VerifierException('Signature did not match');
        }
        return $msg;
    }

}
